// Working Files List
// Visual Studio extension tool window that shows a selectable list of files
// that are open in the editor
// Copyright © 2016 Anthony Fung

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using EnvDTE;
using EnvDTE80;
using Moq;
using NUnit.Framework;
using WorkingFilesList.Core.Interface;
using WorkingFilesList.Core.Model;
using WorkingFilesList.ToolWindow.Test.TestingInfrastructure;
using WorkingFilesList.ToolWindow.ViewModel.Command;

namespace WorkingFilesList.ToolWindow.Test.ViewModel.Command
{
    class OpenTestFileTests
    {
        [Test]
        public void CanExecuteReturnsTrue()
        {
            // Arrange

            var command = new OpenTestFile(
                Mock.Of<DTE2>(),
                Mock.Of<ITestFileNameEvaluator>());

            // Act

            var canExecute = command.CanExecute(null);

            // Assert

            Assert.IsTrue(canExecute);
        }

        [Test]
        public void ExecuteActivatesDocumentWindowForEvaluatedTestFile()
        {
            // Arrange

            const string fullName = "FullName";
            const string testFileName = "TestFileName";

            var info = new DocumentMetadataInfo
            {
                FullName = fullName
            };

            var windowMock = new Mock<Window>();

            var evaluator = Mock.Of<ITestFileNameEvaluator>(t =>
                t.EvaluateTestFileName(fullName) == testFileName);

            var dte2 = Mock.Of<DTE2>(d =>
                d.Solution == Mock.Of<Solution>(s =>
                    s.FindProjectItem(testFileName) == Mock.Of<ProjectItem>(p =>
                        p.Open(Constants.vsViewKindCode) == windowMock.Object)));

            var builder = new DocumentMetadataFactoryBuilder();
            var factory = builder.CreateDocumentMetadataFactory(true);
            var metadata = factory.Create(info);

            var command = new OpenTestFile(dte2, evaluator);

            // Act

            command.Execute(metadata);

            // Assert

            windowMock.Verify(w => w.Activate());
        }

        [Test]
        public void ExecuteDoesNotThrowExceptionWithNullProjectItem()
        {
            // Arrange

            var info = new DocumentMetadataInfo
            {
                FullName = "FullName"
            };

            var solutionMock = new Mock<Solution>();

            solutionMock
                .Setup(s => s.FindProjectItem(It.IsAny<string>()))
                .Returns<ProjectItem>(null);

            var dte2 = Mock.Of<DTE2>(d => d.Solution == solutionMock.Object);

            var builder = new DocumentMetadataFactoryBuilder();
            var factory = builder.CreateDocumentMetadataFactory(true);
            var metadata = factory.Create(info);

            var command = new OpenTestFile(
                dte2,
                Mock.Of<ITestFileNameEvaluator>());

            // Act, Assert

            Assert.DoesNotThrow(() => command.Execute(metadata));
        }

        [Test]
        public void ExecuteDoesNotThrowExceptionWithNullProjectItemWindow()
        {
            // Arrange

            var info = new DocumentMetadataInfo
            {
                FullName = "FullName"
            };

            var projectItemMock = new Mock<ProjectItem>();

            projectItemMock
                .Setup(p => p.Open(It.IsAny<string>()))
                .Returns<Window>(null);

            var dte2 = Mock.Of<DTE2>(d =>
                d.Solution == Mock.Of<Solution>(s =>
                    s.FindProjectItem(It.IsAny<string>()) == projectItemMock.Object));

            var builder = new DocumentMetadataFactoryBuilder();
            var factory = builder.CreateDocumentMetadataFactory(true);
            var metadata = factory.Create(info);

            var command = new OpenTestFile(
                dte2,
                Mock.Of<ITestFileNameEvaluator>());

            // Act, Assert

            Assert.DoesNotThrow(() => command.Execute(metadata));
        }

        [Test]
        public void ExecuteDoesNotThrowExceptionWithNullParameter()
        {
            // Arrange

            var dteMock = new Mock<DTE2>();
            dteMock.Setup(d => d.Solution).Returns<Solution>(null);

            var command = new OpenTestFile(
                dteMock.Object,
                Mock.Of<ITestFileNameEvaluator>());

            // Act

            Assert.DoesNotThrow(() => command.Execute(null));

            // Assert

            dteMock.Verify(d => d.Solution, Times.Never);
        }
    }
}
